-- supabase/migrations/YYYYMMDDHHMMSS_initial_schema.sql

-- Extension required for UUID generation if not already enabled
-- create extension if not exists "uuid-ossp";

-- Projects Table
create table projects (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users(id) on delete cascade not null,
  name text not null,
  color text, -- Assuming color is stored as text (e.g., hex code)
  created_at timestamptz default timezone('utc'::text, now()) not null
);

-- Time Entries Table
create table time_entries (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users(id) on delete cascade not null,
  project_id bigint references projects(id) on delete set null, -- Allow null if project is deleted
  start_time timestamptz default timezone('utc'::text, now()) not null,
  end_time timestamptz,
  description text,
  created_at timestamptz default timezone('utc'::text, now()) not null
);

-- API Keys Table
create table api_keys (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users(id) on delete cascade not null,
  key_name text default 'Default API Key' not null,
  key_hash text not null unique, -- Store a hash of the API key, not the key itself
  created_at timestamptz default timezone('utc'::text, now()) not null,
  last_used_at timestamptz
);

-- Enable Row Level Security (RLS)
alter table projects enable row level security;
alter table time_entries enable row level security;
alter table api_keys enable row level security;

-- RLS Policies for Projects
create policy "Allow users to manage their own projects" on projects
  for all using (auth.uid() = user_id);

-- RLS Policies for Time Entries
create policy "Allow users to manage their own time entries" on time_entries
  for all using (auth.uid() = user_id);

-- RLS Policies for API Keys
create policy "Allow users to manage their own API keys" on api_keys
  for all using (auth.uid() = user_id);

-- Policy: Allow the webhook (using anon key) to SELECT user_id based on key_hash
CREATE POLICY "Allow anon key lookup via key_hash for webhook"
ON public.api_keys
FOR SELECT
USING ( true ); -- Allows SELECT for any role (anon, authenticated)

-- Add tables to the Supabase real-time publication
-- Note: This might require elevated privileges depending on setup.
-- Alternatively, this can often be managed via the Supabase Studio UI.
begin;
  -- remove the default publication
  drop publication if exists supabase_realtime;

  -- re-create the publication but don't enable it for any tables
  create publication supabase_realtime;
commit;

-- add specific tables to the publication
alter publication supabase_realtime add table projects;
alter publication supabase_realtime add table time_entries;
-- We don't necessarily need api_keys to be real-time, excluding for now. 