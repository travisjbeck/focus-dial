# Focus Dial Firmware Project Rules

## Current Focus

We are currently developing the **Time Tracking Web Application** for the Focus Dial.
- **Goal:** Create a React SPA dashboard (hosted on a Raspberry Pi) to receive time tracking data from the Focus Dial via webhooks, store it in a database, and provide features for managing time entries and generating invoices.
- **Key Document:** Refer to `project-webapp.md` for the detailed plan and task breakdown.
- **Architecture:** Backend API (Node.js/Express/SQLite) on Raspberry Pi, Frontend (React) served by Pi, Focus Dial sends webhooks to Pi.
- **Project Directory:** All web application code (backend and frontend) should reside within the `time-tracking-app` directory in the workspace root.

## Project History & Context

### Firmware Project Rules (Focus Dial Hardware: ESP32-S2)

- **Purpose**: Firmware for the "Focus Dial" hardware.
- **Functionality**: Timer device, rotary dial, OLED, LEDs, Wi-Fi, webhooks, web config UI.
- **Hardware**: Adafruit QT Py ESP32-S2 (ESP32-S2, 240MHz, 4MB Flash, 2MB PSRAM).
- **Framework**: Arduino via PlatformIO.
- **Key Files**: `main.cpp`, `StateMachine.cpp`, `controllers/`, `states/`, `platformio.ini`.

### Feature: Project Timekeeping (Firmware - Completed)

- **Summary:** Added ability to select projects (name/color) on the device before starting a timer. Project color is shown on LEDs. Project name is sent via webhook.
- **Key Document:** `project-timekeeping.md` (marked as complete).

### Feature: Configuration Web UI (Firmware - Completed)

- **Summary:** Built a web interface (HTML/CSS/JS served from LittleFS via ESPAsyncWebServer) accessible at `focus-dial.local`. Allows managing projects (add/edit/delete name/color) and configuring the webhook URL. Backend API endpoints (`/api/projects`, `/api/webhook`) handle data storage in NVS.

## Development Guidelines

- Follow instructions precisely.
- Consult `project-webapp.md` for current tasks.
- Prioritize robust, maintainable code adhering to best practices.
- Use standard web development tools and practices for the web app (Node.js, React, etc.).
- Remember the ESP32 firmware only needs to reliably send webhooks to the Raspberry Pi backend.

## Project Overview

- **Purpose**: Firmware for the "Focus Dial" hardware.
- **Functionality**: A timer device with a rotary dial input, OLED display, and LED indicators. Allows setting timers with configurable intervals. Features Bluetooth (likely for audio feedback/control) and Wi-Fi connectivity with webhook callback capabilities.
- **Hardware**: Based on ESP32, specifically the Adafruit QT Py ESP32 board.
- **Framework**: Arduino via PlatformIO.

## Code Structure

- **Main Source**: `firmware/src/`
- **Entry Point**: `firmware/src/main.cpp`
- **Libraries**: `firmware/lib/` (Project-specific libraries/components)
- **Headers**: `firmware/include/`
- **PlatformIO Config**: `platformio.ini` (Defines board, framework, dependencies)
- **Dependencies**: Managed in `platformio.ini` under `lib_deps`. Includes libraries for buttons, encoder, display (SSD1306), LEDs (NeoPixel), Wi-Fi provisioning, and Bluetooth A2DP audio.
- **Data/Assets**: `firmware/data/` (Likely for filesystem data, if used)
- **Tests**: `firmware/test/`
- **Partitions**: Custom flash partitioning defined in `firmware/partitions.csv`.

## Architecture & Design

- **Core Logic**: State machine pattern implemented in `firmware/src/StateMachine.cpp` and state implementations likely in `firmware/src/states/`.
- **Controllers**: Separate classes handle specific hardware interactions:
  - `DisplayController` (`firmware/src/controllers/DisplayController.cpp` - assumed path): Manages the OLED display.
  - `LEDController` (`firmware/src/controllers/LEDController.cpp` - assumed path): Controls the NeoPixel LEDs.
  - `InputController` (`firmware/src/controllers/InputController.cpp` - assumed path): Handles button presses and rotary encoder movements.
  - `NetworkController` (`firmware/src/controllers/NetworkController.cpp` - assumed path): Manages Wi-Fi/Bluetooth connectivity and webhooks.
- **Configuration**: Likely uses `#include "Config.h"` (seen in `main.cpp`) for hardware pins and settings. Potentially uses `Preferences` class (seen in `main.cpp`) for persistent storage.

## Development & Maintenance

- **Building/Uploading**: Use PlatformIO commands (e.g., `pio run`, `pio run -t upload`). The full command often needed in the terminal is: `source ~/.platformio/penv/bin/activate && platformio run --environment adafruit_qtpy_esp32` (for build) or similar for upload/monitor/clean.
- **Dependencies**: Add new libraries to `platformio.ini`.
- **Adding Features**:
  - For new states: Create a new state class (likely inheriting from a base state) in `firmware/src/states/` and integrate it into `StateMachine.cpp`.
  - For new hardware interactions: Update the relevant controller or create a new one if necessary.
  - For configuration changes: Update `Config.h` or relevant configuration files/mechanisms.
- **Connectivity**:
  - Wi-Fi setup is likely handled by the `WiFiProvisioner` library.
  - Webhook logic resides within `NetworkController`.
  - Bluetooth A2DP suggests audio output capabilities.
- **Debugging**: Use `Serial.begin(115200)` and `Serial.print()` statements. Monitor output using PlatformIO's monitor (`pio device monitor`).

## Key Files/Classes to Know

- `platformio.ini`: Project configuration, dependencies.
- `firmware/src/main.cpp`: Entry point, controller initialization, main loop.
- `firmware/src/StateMachine.cpp`: Core application logic flow.
- `firmware/src/controllers/`: Directory containing hardware interface classes.
- `firmware/src/states/`: Directory containing different application states.
- `Config.h` (Assumed): Hardware pin definitions and constants.

## Feature Development Tracking

- For the "Project Timekeeping" feature, refer to the detailed task list and track progress in `project-timekeeping.md`.
